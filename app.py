# -*- coding: utf-8 -*-
"""Untitled14.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11HKY1TUohgM66d--ZiAJzVYDLEB0Bsgb
"""

from init import app, jsonify, bcrypt, request, db
import json
from auth import requires_auth, get_token
from Appdb import User, News
from Project.NewsApp import location_data,id_data

@app.route('/getnews',methods=['POST'])
def getnews():
    a = location_data("any")
    a = json.dumps(a)
    return a


@app.route('/getnewsspecific',methods=['POST'])
def getnewsspecific():
    data = request.get_json()
    if 'id' in data:
        id = int(data['id'])
        news = id_data(id)
        news = json.dumps(news)
        return news,200

    else: return  403


@app.route("/user", methods=['POST'])
@requires_auth
def user_view():
    """
    User endpoint, can only be accessed by an authorized user
    """
    data = request.json

    # Check if 'user' key exists in the JSON data
    if 'user' in data:
        username = data['user']
        return f"Received username: {username}"
    else:
        return "No username provided in the request"


@app.route('/login', methods=['POST'])
def login():
    print("dopmg")
    data = request.get_json()
    print(data)
    if 'user' in data:
        email = data['user']
        us = User.query.filter_by(email=email).first()
        print(us)
        if us is None:
            return "user not found", 404
        if 'password' in data:
            password = data['password']
            is_valid = bcrypt.check_password_hash(us.password, password)
            if is_valid:
                data = get_token()
                print(us.id)
                return {'data':data, 'id':us.id}, 200
            else:
                return "forbidden", 403
        else:
            return "password not found", 400
    else:
        return "user not found", 400


@app.route('/register', methods=['POST'])
def register():
    data = request.get_json()
    print(data)
    if 'user' in data and 'password' in data:
        email = data['user']
        password = data['password']
        us = User.query.filter_by(email=email).first()
        if us is not None:
            print(us.email)
            return  "user already exists",403
        hashed_password = bcrypt.generate_password_hash(password).decode('utf-8')
        user = User(email=email, password=hashed_password)
        db.session.add(user)
        db.session.commit()
        us = User.query.filter_by(email=email).first()
        data = get_token()
        return {'data':data, 'id':us.id}, 200


@app.route('/', methods=['POST'])
def index_view():
    return jsonify(msg="hello world")


if __name__ == "__main__":
    app.run(debug=True)
